# Generated by Django 5.1.5 on 2025-01-30 09:43

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import main.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Day',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_field', models.CharField(default=main.models.get_current_date_formatted, max_length=10, verbose_name='Текущая дата')),
                ('day_field', models.TextField(max_length=15)),
                ('lesson1', models.TextField(blank=True, max_length=20, null=True, verbose_name='Урок 1')),
                ('lesson1_mark', models.TextField(blank=True, max_length=2, null=True, verbose_name='Оценка 1')),
                ('lesson2', models.TextField(blank=True, max_length=20, null=True, verbose_name='Урок 2')),
                ('lesson2_mark', models.TextField(blank=True, max_length=2, null=True, verbose_name='Оценка 2')),
                ('lesson3', models.TextField(blank=True, max_length=20, null=True, verbose_name='Урок 3')),
                ('lesson3_mark', models.TextField(blank=True, max_length=2, null=True, verbose_name='Оценка 3')),
                ('lesson4', models.TextField(blank=True, max_length=20, null=True, verbose_name='Урок 4')),
                ('lesson4_mark', models.TextField(blank=True, max_length=2, null=True, verbose_name='Оценка 4')),
                ('lesson5', models.TextField(blank=True, max_length=20, null=True, verbose_name='Урок 5')),
                ('lesson5_mark', models.TextField(blank=True, max_length=2, null=True, verbose_name='Оценка 5')),
                ('lesson6', models.TextField(blank=True, max_length=20, null=True, verbose_name='Урок 6')),
                ('lesson6_mark', models.TextField(blank=True, max_length=2, null=True, verbose_name='Оценка 6')),
                ('lesson7', models.TextField(blank=True, max_length=20, null=True, verbose_name='Урок 7')),
                ('lesson7_mark', models.TextField(blank=True, max_length=2, null=True, verbose_name='Оценка 7')),
                ('lesson8', models.TextField(blank=True, max_length=20, null=True, verbose_name='Урок 8')),
                ('lesson8_mark', models.TextField(blank=True, max_length=2, null=True, verbose_name='Оценка 8')),
            ],
        ),
        migrations.CreateModel(
            name='SchoolClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=3)),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=255)),
                ('school_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students', to='main.schoolclass')),
            ],
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subjects', models.ManyToManyField(related_name='teachers', to='main.subject')),
            ],
        ),
        migrations.CreateModel(
            name='Grade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.PositiveSmallIntegerField(choices=[(2, '2'), (3, '3'), (4, '4'), (5, '5')])),
                ('coefficient', models.PositiveIntegerField(default=1)),
                ('date_received', models.DateField(auto_now_add=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grades', to='main.student')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.subject')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grades', to='main.teacher')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, related_name='custom_user_set', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='custom_user_permissions_set', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='teacher',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_profile', to='main.user'),
        ),
        migrations.AddField(
            model_name='schoolclass',
            name='class_teacher',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='class_teacher', to='main.user'),
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.CharField(choices=[('Monday', 'Понедельник'), ('Tuesday', 'Вторник'), ('Wednesday', 'Среда'), ('Thursday', 'Четверг'), ('Friday', 'Пятница'), ('Saturday', 'Суббота')], max_length=10)),
                ('lesson_number', models.PositiveSmallIntegerField()),
                ('school_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedule', to='main.schoolclass')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.subject')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedule', to='main.teacher')),
            ],
            options={
                'unique_together': {('school_class', 'day_of_week', 'lesson_number')},
            },
        ),
    ]
